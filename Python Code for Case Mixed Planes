import numpy as np

# Set seed for reproducibility
np.random.seed(42)

# Number of harmonics
N = 10

# Fixed optimal parameters from previous optimizations
c = 0.1  # From TS^2
C_f = 9.851795570935874 # From TT^2
a_k = np.array([0.89446425, -0.51613401,  0.87145797, -0.58411575, -0.94210068, -0.5326063,
  0.36370521, -0.1292051,   0.14547634, -0.07570831])  # From TT^2
b_k = np.array([0.44033276, -0.61823518,  0.89777064, -0.80811324,  0.98383369,  0.41181353,
-0.24576054,  0.25970842, -0.02000406, -0.30988651])  # From TT^2

# Function to compute K_biort for Mixed Planes considering both sigma and sigma_perp
def K_biort_Mixed_Symmetric(theta, phi, alpha, c, a_k, b_k, C_f):
    f1 = c * np.sin(theta) * np.cos(phi)
    f2 = C_f + sum(a_k[k-1] * np.cos(k * alpha) + b_k[k-1] * np.sin(k * alpha) for k in range(1, N+1))

    # Corrected gradient squared terms
    grad_f1_sq = c**2 * (np.cos(theta)**2 * np.cos(phi)**2 + np.sin(theta)**2 * np.sin(phi)**2)
    grad_f2_sq = sum(k**2 * (a_k[k-1] * np.sin(k * alpha) - b_k[k-1] * np.cos(k * alpha))**2 for k in range(1, N+1))

    # Corrected Hessian terms for sigma
    hessian_f1_sigma = c * np.cos(phi) * (np.cos(theta)**2 - 2 * np.sin(theta))
    hessian_f2_sigma = sum(k**2 * (-a_k[k-1] * np.cos(k * alpha) - b_k[k-1] * np.sin(k * alpha)) for k in range(1, N+1))

    # Compute K_biort for sigma (excluding K_S2 for mixed planes)
    K_sigma = 0.5 * np.exp(-2 * (f1 + f2)) * (grad_f1_sq + grad_f2_sq - hessian_f1_sigma - hessian_f2_sigma)

    # K_biort minimum over sigma and sigma_perp (no sign inversion for Hessian terms)
    return K_sigma

# Generate 1,000,000 random test points
np.random.seed(123)
theta_test = np.random.uniform(0, np.pi, 1000000)
phi_test = np.random.uniform(0, 2*np.pi, 1000000)
alpha_test = np.random.uniform(0, 2*np.pi, 1000000)

# Compute K_biort for Mixed Planes
K_Mixed_Symmetric_values = K_biort_Mixed_Symmetric(theta_test, phi_test, alpha_test, c, a_k, b_k, C_f)

# Find the minimum value of K_biort considering both directions
min_K_Mixed_Symmetric = np.min(K_Mixed_Symmetric_values)

# Output result with debug information
print("Minimum absolute K_biort for Mixed Planes (sigma and sigma_perp):", min_K_Mixed_Symmetric)
print("Range of K_biort values:", np.min(K_Mixed_Symmetric_values), np.max(K_Mixed_Symmetric_values))
