import numpy as np

# Set seed for reproducibility
np.random.seed(42)

# Number of harmonics
N = 5

# Fixed optimal parameters from previous optimizations
c = 20  # From TS^2
K_S2 = 50  # From TS^2
C_f = 1.0028  # From TT^2
a_k = np.array([0.9886, -0.9945, -0.1551, 0.0469, 0.0114])  # From TT^2
b_k = np.array([0.9930,  0.9868,  0.0567, -0.3635, -0.0247])  # From TT^2

# Function to compute K_biort for Mixed Planes considering both sigma and sigma_perp
def K_biort_Mixed(theta, phi, alpha, c, K_S2, a_k, b_k, C_f):
    f1 = c * np.sin(theta) * np.cos(phi)
    f2 = C_f + sum(a_k[k-1] * np.cos(k * alpha) + b_k[k-1] * np.sin(k * alpha) for k in range(1, N+1))
    
    grad_f1_sq = c**2 * (np.cos(theta)**2 * np.cos(phi)**2 + np.sin(phi)**2)
    grad_f2_sq = sum(k**2 * (a_k[k-1]**2 + b_k[k-1]**2) for k in range(1, N+1))
    
    hessian_f1 = c * np.cos(phi) * (np.cos(theta)**2 - 2 * np.sin(theta))
    hessian_f2 = sum(k**2 * (-a_k[k-1] * np.cos(k * alpha) - b_k[k-1] * np.sin(k * alpha)) for k in range(1, N+1))
    
    return 0.5 * np.exp(-2 * (f1 + f2)) * (K_S2 + grad_f1_sq + grad_f2_sq - hessian_f1 - hessian_f2)

# Generate 100,000 random test points
np.random.seed(123)
theta_test = np.random.uniform(0, np.pi, 100000)
phi_test = np.random.uniform(0, 2*np.pi, 100000)
alpha_test = np.random.uniform(0, 2*np.pi, 100000)

# Compute K_biort for Mixed Planes
K_Mixed_values = K_biort_Mixed(theta_test, phi_test, alpha_test, c, K_S2, a_k, b_k, C_f)

# Find the minimum value of K_biort
min_K_Mixed = np.min(K_Mixed_values)

# Output result
print("Minimum absolute K_biort for Mixed Planes:", min_K_Mixed)
