import numpy as np
from scipy.optimize import minimize, differential_evolution

# Set seed for reproducibility
np.random.seed(42)

# Number of harmonics
N = 10

# Function K_biort for TT^2
def K_biort_TT2(alpha, a_k, b_k, C_f):
    alpha = np.asarray(alpha)  # Ensure vectorized computation
    S = sum(k**2 * (a_k[k-1]**2 * np.sin(k*alpha)**2 + b_k[k-1]**2 * np.cos(k*alpha)**2 
                    - 2 * a_k[k-1] * b_k[k-1] * np.sin(k*alpha) * np.cos(k*alpha)) for k in range(1, N+1))
    H = sum(k**2 * (-a_k[k-1] * np.cos(k*alpha) - b_k[k-1] * np.sin(k*alpha)) for k in range(1, N+1))
    
    exp_factor = np.exp(-2 * np.clip(C_f, -10, 10))  # Prevent overflow issues
    return 0.5 * exp_factor * (S - H)

# Function to minimize (maximize the minimum of K_biort)
def min_K_biort_TT2(params):
    a_k = params[:N]
    b_k = params[N:2*N]
    C_f = params[2*N]
    alpha_vals = np.linspace(0, 2*np.pi, 100)  # High resolution
    K_vals = K_biort_TT2(alpha_vals, a_k, b_k, C_f)
    return -np.min(K_vals)  # Maximize the minimum

# Constraint to enforce positivity of K_biort
def constraint_K_biort_positive(params):
    a_k = params[:N]
    b_k = params[N:2*N]
    C_f = params[2*N]
    alpha_vals = np.linspace(0, 2*np.pi, 100)  
    min_K = np.min(K_biort_TT2(alpha_vals, a_k, b_k, C_f))
    return min_K  # Must be >= 0

# Initial conditions
init_params = np.random.uniform(-1, 1, 2*N + 1)
init_params[2*N] = 3  # C_f initial guess

# Bounds for parameters
bounds = [(-1, 1)] * (2*N) + [(1, 10)]  # a_k, b_k in [-1,1], C_f in [1,10]

# Step 1: Global optimization with Differential Evolution
result_DE = differential_evolution(min_K_biort_TT2, bounds, strategy='best1bin', tol=1e-6, maxiter=300)

# Step 2: Local optimization with SLSQP including positivity constraint
constraints = [{'type': 'ineq', 'fun': constraint_K_biort_positive}]
result_TT2 = minimize(min_K_biort_TT2, result_DE.x, method='SLSQP', bounds=bounds, constraints=constraints)

# Extract optimized parameters
opt_a_k = result_TT2.x[:N]
opt_b_k = result_TT2.x[N:2*N]
opt_C_f = result_TT2.x[2*N]
min_K_TT2 = -result_TT2.fun

# Final rigorous test: Random sampling of 1,000,000 points for verification
np.random.seed(123)
alpha_test_points = np.random.uniform(0, 2*np.pi, 1000000)
K_values = K_biort_TT2(alpha_test_points, opt_a_k, opt_b_k, opt_C_f)
min_K_random_test = np.min(K_values)

# Output results
print("Final optimal parameters for TT^2:")
print("C_f =", opt_C_f)
print("a_k =", opt_a_k)
print("b_k =", opt_b_k)
print("Minimum absolute K_biort from optimization:", min_K_TT2)
print("Minimum absolute K_biort from 1,000,000 random test points:", min_K_random_test)
